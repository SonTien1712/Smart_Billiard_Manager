/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.7.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Customer;
import org.openapitools.model.CustomerSignup;
import org.openapitools.model.CustomerUpdate;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-14T14:32:21.168513498+07:00[Asia/Bangkok]", comments = "Generator version: 7.7.0")
@Validated
@Tag(name = "Customers", description = "the Customers API")
public interface CustomersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * PATCH /customers/{customerId} : Update customer information
     *
     * @param customerId  (required)
     * @param customerUpdate  (required)
     * @return Customer updated (status code 200)
     *         or Customer not found (status code 404)
     */
    @Operation(
        operationId = "customersCustomerIdPatch",
        summary = "Update customer information",
        tags = { "Customers" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Customer updated", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Customer.class))
            }),
            @ApiResponse(responseCode = "404", description = "Customer not found")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/customers/{customerId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Customer> customersCustomerIdPatch(
        @Parameter(name = "customerId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("customerId") Integer customerId,
        @Parameter(name = "CustomerUpdate", description = "", required = true) @Valid @RequestBody CustomerUpdate customerUpdate
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"address\" : \"address\", \"is_active\" : true, \"expiry_date\" : \"2000-01-23\", \"phone_number\" : \"phone_number\", \"customer_name\" : \"customer_name\", \"date_joined\" : \"2000-01-23T04:56:07.000+00:00\", \"customer_id\" : 0, \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /customers : Get current customer details
     *
     * @return Customer details (status code 200)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "customersGet",
        summary = "Get current customer details",
        tags = { "Customers" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Customer details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Customer.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/customers",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Customer> customersGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"address\" : \"address\", \"is_active\" : true, \"expiry_date\" : \"2000-01-23\", \"phone_number\" : \"phone_number\", \"customer_name\" : \"customer_name\", \"date_joined\" : \"2000-01-23T04:56:07.000+00:00\", \"customer_id\" : 0, \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /customers : Register new customer (shop owner)
     *
     * @param customerSignup  (required)
     * @return Customer registered successfully (status code 201)
     *         or Invalid input (status code 400)
     *         or Email already exists (status code 409)
     */
    @Operation(
        operationId = "customersPost",
        summary = "Register new customer (shop owner)",
        tags = { "Customers" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Customer registered successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Customer.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input"),
            @ApiResponse(responseCode = "409", description = "Email already exists")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/customers",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Customer> customersPost(
        @Parameter(name = "CustomerSignup", description = "", required = true) @Valid @RequestBody CustomerSignup customerSignup
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"address\" : \"address\", \"is_active\" : true, \"expiry_date\" : \"2000-01-23\", \"phone_number\" : \"phone_number\", \"customer_name\" : \"customer_name\", \"date_joined\" : \"2000-01-23T04:56:07.000+00:00\", \"customer_id\" : 0, \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
