/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.7.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Table;
import org.openapitools.model.TableUpdate;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-14T14:32:21.168513498+07:00[Asia/Bangkok]", comments = "Generator version: 7.7.0")
@Validated
@Tag(name = "Tables", description = "the Tables API")
public interface TablesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /tables/{tableId} : Get table details
     *
     * @param tableId  (required)
     * @return Table details (status code 200)
     */
    @Operation(
        operationId = "tablesTableIdGet",
        summary = "Get table details",
        tags = { "Tables" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Table details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Table.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/tables/{tableId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Table> tablesTableIdGet(
        @Parameter(name = "tableId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("tableId") Integer tableId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"table_status\" : \"table_status\", \"hourly_rate\" : 1.4658129805029452, \"club_id\" : 6, \"location\" : \"location\", \"table_id\" : 0, \"table_name\" : \"table_name\", \"table_type\" : \"table_type\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /tables/{tableId} : Update table information
     *
     * @param tableId  (required)
     * @param tableUpdate  (required)
     * @return Table updated (status code 200)
     */
    @Operation(
        operationId = "tablesTableIdPatch",
        summary = "Update table information",
        tags = { "Tables" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Table updated", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Table.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/tables/{tableId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Table> tablesTableIdPatch(
        @Parameter(name = "tableId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("tableId") Integer tableId,
        @Parameter(name = "TableUpdate", description = "", required = true) @Valid @RequestBody TableUpdate tableUpdate
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"table_status\" : \"table_status\", \"hourly_rate\" : 1.4658129805029452, \"club_id\" : 6, \"location\" : \"location\", \"table_id\" : 0, \"table_name\" : \"table_name\", \"table_type\" : \"table_type\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
